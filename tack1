login_ui.py
    ↓ （帳號密碼登入）
login_controller.py
    ↓ （與 ControlServer 建立連線，傳送登入請求）
成功 → 回傳 GameClient（含伺服器清單）

    ↓
lobby_ui.py
    ↓
lobby_controller.py
    ├── 點選伺服器框框：若處於 waiting/loading → connect_to_server()
    └── 點 Watch 按鈕：直接觀戰 → send_watch() + start_ws_receiver()

    ↓
進入遊戲主畫面（尚未貼出）


1. 架構類型：Client-Server Architecture + WebSocket
使用 Client-Server 架構 分為三端：

前端 Client（Pygame）

中控 Control Server（負責帳號驗證與伺服器管理）

遊戲伺服器 Game Server（每場遊戲的執行與狀態管理）

前後端透過 WebSocket（全雙工通訊） 持續同步遊戲狀態與即時事件（如地鼠出現、打擊、排行榜更新）

2. 通訊協定與即時互動：WebSocket Protocol
使用 websockets 套件實作 WebSocket 通訊：

低延遲、持久連線 適用於遊戲場景

使用 JSON 格式傳輸指令與資料包（type, username, score 等）

控制訊息類型如：login, status_update, hit, replay_offer, final

3. 非同步處理：AsyncIO + Event Loop
以 asyncio 實作非同步程式邏輯：

多個任務可同時運作（倒數、廣播、WebSocket 接收等）

使用 async def, await 搭配背景 event loop 管理流程與延遲任務

結合 asyncio.Event 進行跨模組同步（如 phase_changed_event 通知地鼠產生）

4. 遊戲開發：Pygame 作為前端引擎
使用 pygame 製作前端畫面與互動 UI：

畫面更新與事件監聽：screen.fill, pg.event.get(), pg.display.flip()

動畫效果管理：模組化 animation.py 控制點擊特效等

狀態管理整合：分為登入畫面、伺服器大廳、遊戲中、結束畫面

5. 遊戲狀態控制：Finite State Machine（狀態機）設計
遊戲階段以 狀態機模式 控制流轉（game_phase）：

waiting → loading → playing → gameover → post_gameover

每個階段由獨立模組處理，如：

gm_loading.py: 進入前倒數

gm_playing.py: 計時與打擊監控

gm_gameover.py: 排行結算與重置

管理每階段的開始時間、倒數邏輯與事件觸發條件

6. 多人同步與即時資料：Shared Context + Broadcasting
使用 context.py 作為共享狀態容器（等同於 singleton 狀態服務）：

包含：目前遊戲階段、倒數時間、玩家清單、分數表、WebSocket 清單

使用 broadcaster.py 負責統一廣播所有玩家狀態更新，避免重複邏輯

7. 模組化與責任分離：MVC+服務導向分層
採取 功能模組化 + 單一職責原則（SRP）：

client.py: 封裝前端 GameClient 的通訊與狀態

login_controller.py: 管理帳號登入與伺服器清單

lobby_controller.py: 處理伺服器選擇與觀戰流程

gm_*.py: 按照遊戲階段切分每個邏輯單元，維持易讀性與可維護性